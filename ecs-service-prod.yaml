Parameters:

#ECS Params  
  ECRTag: 
    Type: String
    Default: latest
  ECSCluster: 
    Type: String
    Default: 'prod'  
  ECRAppRepoName:
    Type: String
    Default: 'sample-app'
  DesiredTaskCount:
    Type: Number
    Default: 2
  Memory:
    Type: String 
    Default: "512"  
  
#LoadBalancer Params 
  VpcId:
    Type: String
  Path:
    Type: String
    Default: '/'
  ALBListener:
    Type: String
  Priority:
    Type: Number
  ContainerPort:
    Type: Number
  AppLoadBalancerName:
    Type: String  

Resources:

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ECSTaskDefinition
    Properties:
        DesiredCount: !Ref DesiredTaskCount
        Cluster: !Ref ECSCluster
        Role: !Ref ECSServiceRole
        LaunchType: EC2
        ServiceName: "sample-app"
        TaskDefinition: !Ref ECSTaskDefinition
        LoadBalancers:
          - ContainerName: !Sub ${ECRAppRepoName}
            ContainerPort: !Ref ContainerPort
            TargetGroupArn: !Ref TargetGroup
            
  TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
          VpcId: !Ref VpcId
          Port: !Ref ContainerPort
          Protocol: HTTP
          Matcher: 
              HttpCode: 200-299
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 5
          HealthyThresholdCount: 2
          TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 0
          
  ListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
          ListenerArn: !Ref ALBListener
          Priority: !Ref Priority
          Conditions:
              - Field: path-pattern
                Values: 
                  - !Ref Path
          Actions:
              - TargetGroupArn: !Ref TargetGroup
                Type: forward          

  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AdministratorAccess

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
        Family: !Ref 'AWS::StackName'
        TaskRoleArn:
          Fn::GetAtt: TaskRole.Arn
        ContainerDefinitions:
          -
           Name: "sample-app"
           PortMappings:
            -
              ContainerPort: !Ref ContainerPort
              HostPort: 0
           Essential: "True"
           LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub ${AWS::Region}
              awslogs-group: !Ref ECSCluster
              awslogs-stream-prefix: !Sub ${ECRTag}
           Image: !Join
            - ''
            - - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/
              - !Ref ECRAppRepoName
              - ":"
              - '{{resolve:secretsmanager:ImageTag}}'
           Memory: !Ref Memory             

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

Outputs:
  EcsServiceName:
    Description: ECS Service Name
    Value: !GetAtt ECSService.Name
